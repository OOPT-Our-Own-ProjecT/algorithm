#include <vector>
#include <queue>

using namespace std;

int solution(vector<vector<int> > maps)
{
    int answer = -1;

    int n = maps.size();
    int m = maps[0].size();
    
    vector<vector<int>> visited(n, vector<int>(m, 0));
    queue<pair<int, int>> q;
    int dir[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    q.push({0, 0});
    visited[0][0] = 1;
    
    while(!q.empty()){
        
        int x = q.front().first;
        int y = q.front().second;
        
        if(x == n - 1 && y == m - 1){
            
            answer = visited[n - 1][m - 1];
            
            break;
        }
        
        q.pop();
        
        for(int i = 0; i < 4; i++){
            
            int nx = x + dir[i][0];
            int ny = y + dir[i][1];
            
            if(nx >= 0 && nx < n && ny >= 0 && ny < m){
                
                if(visited[nx][ny] == 0 && maps[nx][ny] == 1){
                
                    q.push({nx, ny});
                    visited[nx][ny] = visited[x][y] + 1;
                    
                }
                
            }
            
        }
        
    }
    
    return answer;
}