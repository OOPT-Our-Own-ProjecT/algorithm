#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <iostream>

using namespace std;

vector<int> solution(vector<string> gems) {
    vector<int> answer;
    
    //보석 종류 리스트 만들기
    vector<string> gem_list = gems;
    
    sort(gem_list.begin(), gem_list.end());
    gem_list.erase(unique(gem_list.begin(), gem_list.end()), gem_list.end());
    
    int MIN = 0;
    int start = 0;
    int end = 0;
    map<string, int> m;
    
    //모든 보석을 다 포함하는 end point 찾기
    for(int i = 0; i < gems.size(); i++){
        
        m[gems[i]]++;
        
        if(m.size() == gem_list.size()){
            
            break;
            
        }
        
        end++;
    }
    
    MIN = end - start;
    
    answer.push_back(start + 1);
    answer.push_back(end + 1);
    
    while(end < gems.size()){
        
        string key = gems[start];
        m[key]--;        
        start++;
        
        //start point를 하나씩 증가시켜 모든 보석을 포함하는 위치 조정
        if(m[key] == 0){
            
            end++;
            
            for(; end < gems.size(); end++){
                
                m[gems[end]]++;
                
                if(key == gems[end]){
                    
                    break;
                }
                
            }
            
            //end point가 끝까지 가면 중단
            if(end == gems.size()){

                break;
            }
           
        }
        
        //모든 보석을 포함하는 가장 짧은 구간 구하기
        if(MIN > end - start){

            answer[0] = start + 1;
            answer[1] = end + 1;
            MIN = end - start;

        }

    }
    
    return answer;
}