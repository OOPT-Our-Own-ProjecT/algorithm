#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <iostream>

using namespace std;

string menu;
vector<string> o;
vector<pair<int, string>> ans;

void make_course(int n, string s, int idx){

    if(s.length() == n){
        
        int cnt = 0;
        
        //2번 이상 주문된 코스요리 메뉴 후보 구하기
        for(int a = 0; a < o.size(); a++){
        
            bool flag = true;
            
            for(int b = 0; b < n; b++){
                
                if(o[a].find(s[b]) == string::npos){
                    
                    flag = false;
                    break;
                    
                }
                
            }
            
            if(flag){
                
                cnt++;
                
            }
            
        }
        
        if(cnt >= 2){

            ans.push_back({cnt, s});
                
        }
        
        return;
    }
    else{

        for(int j = idx + 1; j < menu.length(); j++){
        
            make_course(n, s + menu[j], j);
            
        }

    }
    
    return;
}


vector<string> solution(vector<string> orders, vector<int> course) {
    vector<string> answer;
    
    map<char, int> m;
    
    //단품 메뉴별 주문 횟수 계산
    for(int i = 0; i < orders.size(); i++){
        
        for(int j = 0; j < orders[i].length(); j++){
            
            m[orders[i][j]]++;
            
        }
        
    }
    
    //2번 이상 주문되는 단품메뉴 목록
    for(auto i = m.begin(); i != m.end(); i++){
        
        if(i -> second >= 2){
            
            menu += i -> first;
            
        }
        
    }
    
    o = orders;
    
    for(int i = 0; i < course.size(); i++){
        
        make_course(course[i], "", -1);
        
        if(ans.size() != 0){

            sort(ans.begin(), ans.end());
            
            answer.push_back(ans[ans.size() - 1].second);
            
            //가장 많이 함께 주문된 단품메뉴 추가
            for(int j = ans.size() - 2; j >= 0; j--){
                
                if(ans[ans.size() - 1].first == ans[j].first){
                    
                    answer.push_back(ans[j].second);
                    
                }
                else if(ans[ans.size() - 1].first > ans[j].first){
                    
                    break;
                    
                }
                
            }

            vector<pair<int, string>> temp;

            ans = temp;
    
        }
        
    }
    
    sort(answer.begin(), answer.end());
    
    return answer;
}