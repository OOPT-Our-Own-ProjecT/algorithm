#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

long long ans = 0;

void sol(vector<long long> num, string oper, string op, vector<bool> visited){
    
    if(num.size() == 1){
        
        if(ans < abs(num[0])){
            
            ans = abs(num[0]);
            
        }
        
        return;
        
    }
    else{
        
        for(int j = 0; j < visited.size(); j++){
            
            if(!visited[j]){
                
                visited[j] = true;
                string temp = "";
                vector<long long> n;
                n.push_back(num[0]);
                
                for(int k = 0; k < oper.length(); k++){
                    
                    if(op[j] == oper[k]){
                        
                        if(op[j] == '*'){
                            
                            n[n.size() - 1] *= num[k + 1];
                            
                            
                        }
                        else if(op[j] == '+'){
                            
                            n[n.size() - 1] += num[k + 1];
                            
                            
                        }
                        else if(op[j] == '-'){
                            
                            n[n.size() - 1] -= num[k + 1];
                            
                        }
                        
                    }
                    else{

                        n.push_back(num[k + 1]);
                        temp += oper[k];

                    }
                    
                }
                
                sol(n, temp, op, visited);
                visited[j] = false;
                
            }
            
        }
        
    }
    
    return;
}

long long solution(string expression) {
    long long answer = 0;
    
    vector<long long> num;
    string oper = "";
    string op = "";
    long long n = 0;
    
    for(int i = 0; i <= expression.length(); i++){
        
        if(expression[i] >= '0' && expression[i] <= '9'){
            
            n = 10 * n + (expression[i] - '0');
            
        }
        else{
            
            if(expression[i] == '*' || expression[i] == '+' || expression[i] == '-'){

                op += expression[i];
                oper += expression[i];

            }
            num.push_back(n);
            n = 0;
            
        }
        
    }
    
    sort(op.begin(), op.end());
    op.erase(unique(op.begin(), op.end()), op.end());
    
    vector<bool> visited(op.length(), false);
    
    sol(num, oper, op, visited);

    answer = ans;
    
    return answer;
}