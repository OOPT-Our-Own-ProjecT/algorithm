#include <vector>
#include <queue>

using namespace std;

// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
vector<int> solution(int m, int n, vector<vector<int>> picture) {
    int number_of_area = 0;
    int max_size_of_one_area = 0;
    
    vector<int> answer(2);
    answer[0] = number_of_area;
    answer[1] = max_size_of_one_area;
    
    vector<vector<bool>> visited(m, vector<bool> (n, false));
    queue<pair<int, int>> q;
    int dir[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    //bfs 이용
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            
            //방문하지 않은 것 중에 색칠된 부분 찾기
            if(!visited[i][j] && picture[i][j] != 0){
                
                q.push({i, j});
                visited[i][j] = true;
                int cnt = 1;
                
                //색칠된 영역 구하기
                while(!q.empty()){
                    
                    int x = q.front().first;
                    int y = q.front().second;
                    int d = picture[x][y];
                    
                    q.pop();
                    
                    for(int t = 0; t < 4; t++){
                        
                        int nx = x + dir[t][0];
                        int ny = y + dir[t][1];
                        
                        if(nx >= 0 && nx < m && ny >= 0 && ny < n){
                            
                            if(!visited[nx][ny] && picture[nx][ny] == d){
                                
                                q.push({nx, ny});
                                visited[nx][ny] = true;
                                cnt++;
                                
                            }
                            
                        }
                        
                    }
                    
                    
                }
                
                answer[0]++;
                
                if(cnt > answer[1]){
                    
                    answer[1] = cnt;
                    
                }
                
            }
            
        }
    }
    
    return answer;
}